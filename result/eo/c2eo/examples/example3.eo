+package c2eo.examples.example3

+alias c2eo.stdio.printf
+alias c2eo.coperators.add
+alias c2eo.system.stack
+alias c2eo.system.ram

[arg...] > global

  stack > allocator

  ram 1024 > g-ram

  [] > fun1

    ram 1024 > l-ram

    seq > @
      allocator.push l-ram
      l-ram.write 0 (8.as-bytes)
      l-ram.write 8 (17.as-bytes)
      printf "current ram index = %d\n" (allocator.index)
      printf "ram 0 8 = %d\n" ((l-ram.read 0 8).as-int)
      printf "ram 8 8 = %d\n" ((l-ram.read 8 8).as-int)
      (allocator.get (l-ram.index)).wrt 16 ((add ((l-ram.read 0 8).as-int) ((l-ram.read 8 8).as-int)).as-bytes)
      printf "8 + 17 = %d\n" ((l-ram.read 16 8).as-int)
      allocator.pop
      TRUE

  [] > fun2

    ram 1024 > l-ram

    seq > @
      allocator.push l-ram
      l-ram.write 0 (25.as-bytes)
      l-ram.write 8 (19.as-bytes)
      printf "current ram index = %d\n" (allocator.index)
      printf "ram 0 8 = %d\n" ((l-ram.read 0 8).as-int)
      printf "ram 8 8 = %d\n" ((l-ram.read 8 8).as-int)
      (allocator.get (allocator.index)).wrt 16 ((add ((l-ram.read 0 8).as-int) ((l-ram.read 8 8).as-int)).as-bytes)
      printf "25 + 19 = %d\n" ((l-ram.read 16 8).as-int)
      allocator.pop
      TRUE

  [arg...] > main
    seq > @
      allocator.push g-ram
      fun1
      fun2
      TRUE

  main arg > @
