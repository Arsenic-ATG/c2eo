+package c2eo.examples.example3

+alias c2eo.stdio.printf
+alias c2eo.system.ram
+alias c2eo.system.address
+alias c2eo.coperators.add
+alias c2eo.coperators.sub
+alias c2eo.coperators.write
+alias c2eo.coperators.add-int64
+alias c2eo.coperators.read-as-int64

[args...] > global

  ram 2048 > global-ram
  memory > empty-global-position
  ram 1024 > return-ram
  memory > return-size
  address return-ram 0 > return

  [param-start param-size] > fun1
    address global-ram (add param-start 0) > a
    address global-ram (add param-start 8) > b
    address global-ram (add (add param-start param-size) 0) > result
    seq > @
      write result (add-int64 a b)
      write (address global-ram (add empty-global-position 0)) (read-as-int64 result)
      write (address global-ram (add empty-global-position 8)) 8
      write empty-global-position (add empty-global-position 24)
      fun2 (sub empty-global-position 24) 16
      write empty-global-position (sub empty-global-position 24)
      write result (read-as-int64 return)
      write return-size 8
      write return (read-as-int64 result)
      TRUE

  [param-start param-size] > fun2
    address global-ram (add param-start 0) > a
    address global-ram (add param-start 8) > b
    address global-ram (add (add param-start param-size) 0) > result
    seq > @
      write result (add-int64 a b)
      write return-size 8
      write return (read-as-int64 result)
      TRUE

  [arg] > main
    seq > @
      write empty-global-position 0
      write (address global-ram (add empty-global-position 0)) 7
      write (address global-ram (add empty-global-position 8)) 9
      write empty-global-position (add empty-global-position 24)
      fun1 (sub empty-global-position 24) 16
      write empty-global-position (sub empty-global-position 24)
      printf "result = %d" (read-as-int64 return)
      TRUE

  main args > @
