+package c2eo.examples.example2

+alias c2eo.stdio.printf
+alias c2eo.system.ram
+alias c2eo.system.address
+alias c2eo.coperators.add
+alias c2eo.coperators.sub
+alias c2eo.coperators.write
+alias c2eo.coperators.add-int64
+alias c2eo.coperators.read-as-int64

[args...] > global

  ram 2048 > global-ram

  memory > position

  [bias] > fun1
    address > return
      global-ram
      add bias 0
    address > result
      global-ram
      add bias 8
    address > a
      global-ram
      add bias 16
    address > b
      global-ram
      add bias 24
    seq > @
      write result (add-int64 a b)
      write (address global-ram (add position 16)) (read-as-int64 result)
      write (address global-ram (add position 24)) 5
      write position (add position 32)
      fun2 (sub position 32)
      write result (read-as-int64 (address global-ram position))
      write return (read-as-int64 result)
      write position (sub position 32)
      TRUE

  [bias] > fun2
    address > return
      global-ram
      add bias 0
    address > result
      global-ram
      add bias 8
    address > a
      global-ram
      add bias 16
    address > b
      global-ram
      add bias 24
    seq > @
      write result (add-int64 a b)
      write return (read-as-int64 result)
      write position (sub position 32)
      TRUE

  [arg] > main
    seq > @
      write position 0
      write (address global-ram (add position 16)) 7
      write (address global-ram (add position 24)) 9
      write position (add position 32)
      fun1 (sub position 32)
      printf "result = %d" (read-as-int64 (address global-ram position))
      TRUE

  main args > @
