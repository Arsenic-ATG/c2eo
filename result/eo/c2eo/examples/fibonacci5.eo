+package c2eo.examples.fibonacci5

+alias org.eolang.gray.cage
+alias c2eo.system.ram
+alias c2eo.system.address
+alias c2eo.stdio.printf
+alias c2eo.string.memcpy
+alias c2eo.coperators.if
+alias c2eo.coperators.write
+alias c2eo.coperators.get
+alias c2eo.coperators.add
+alias c2eo.coperators.sub
+alias c2eo.coperators.less
+alias c2eo.coperators.add-int64
+alias c2eo.coperators.read-as-int64
+alias c2eo.coperators.memadrcpy
+alias c2eo.coperators.adrmemcpy

[args...] > global

  * (* cage cage cage cage cage cage cage cage cage cage cage cage cage cage cage cage cage cage cage cage cage cage cage cage cage cage cage cage cage cage cage cage) > allocator
  memory > allocator-index

  ram > global-ram
    0

  ram > static-ram
    0

  ram > arguments-ram
    24

  ram > result-ram
    8

  [] > eo-init
    seq > @
      write
        get
          get
            allocator
            0
          0
        global-ram

      write
        global-ram.index
        0

      write
        get
          get
            allocator
            0
          1
        static-ram

      write
        static-ram.index
        1

      write
        get
          get
            allocator
            0
          2
        arguments-ram

      write
        arguments-ram.index
        2

      write
        get
          get
            allocator
            0
          3
        result-ram

      write
        result-ram.index
        3

      write
        allocator-index
        4

      TRUE

  [] > fibo
    ram > local-arguments-ram
      24

    address > n
      local-arguments-ram
      0

    address > p1
      local-arguments-ram
      8

    address > p2
      local-arguments-ram
      16

    ram > local-ram
      8

    address > tmp
      local-ram
      0

    seq > @
      memcpy
        local-arguments-ram
        arguments-ram
        24

      write
        get
          get
            allocator
            0
          allocator-index
        local-arguments-ram

      write
        allocator-index
        add
          allocator-index
          1

      write
        get
          get
            allocator
            0
          allocator-index
        local-ram

      write
        allocator-index
        add
          allocator-index
          1

      if
        less
          1
          read-as-int64
            n
        seq
          write
            tmp
            read-as-int64
              p1

          write
            p1
            add-int64
              p1
              p2

          write
            p2
            read-as-int64
              tmp

          write
            n
            sub
              read-as-int64
                n
              1

          memcpy
            arguments-ram
            local-arguments-ram
            24

          ^.fibo

          TRUE

        seq
          memadrcpy
            result-ram
            p1
            8
          TRUE

      write
        allocator-index
        sub
          allocator-index
          2
      TRUE

  [args] > main
    ram > local-ram
      16

    address > n
      local-ram
      0

    address > result
      local-ram
      8

    seq > @
      write
        get
          get
            allocator
            0
          allocator-index
        local-ram

      write
        allocator-index
        add
          allocator-index
          1

      write
        n
        10

      memadrcpy
        arguments-ram
        n
        8

      write
        address
          arguments-ram
          8
        1

      write
        address
          arguments-ram
          16
        0

      ^.fibo

      adrmemcpy
        result
        result-ram
        8

      printf
        "fibo(%d) = %d\n"
        read-as-int64
          n
        read-as-int64
          result

      TRUE

  seq > @
    eo-init
    main
      args
    TRUE
