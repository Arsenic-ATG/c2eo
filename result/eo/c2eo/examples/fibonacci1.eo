+package c2eo.examples.fibonacci1

+alias c2eo.stdio.printf
+alias c2eo.system.ram
+alias c2eo.system.address
+alias c2eo.coperators.add
+alias c2eo.coperators.sub
+alias c2eo.coperators.write
+alias c2eo.coperators.less
+alias c2eo.coperators.while
+alias c2eo.coperators.add-int64
+alias c2eo.coperators.read-as-int64

[args...] > global

  ram 2048 > global-ram
  memory > empty-global-position
  ram 1024 > return-ram
  memory > return-size
  address return-ram 0 > return
  address global-ram 0 > p1
  address global-ram 8 > p2
  address global-ram 16 > n
  address global-ram 24 > result
  address global-ram 32 > i

  [param-start param-size] > fibo
    add param-start param-size > local-start
    seq > @
      write i 1
      while
        less (read-as-int64 i) (read-as-int64 n)
        seq
          write result (add-int64 p1 p2)
          write p1 (read-as-int64 p2)
          write p2 (read-as-int64 result)
          write i (add (read-as-int64 i) 1)
      TRUE

  [param-start param-size] > main
    add param-start param-size > local-start
    seq > @
      write n 10
      write empty-global-position (add empty-global-position 0)
      fibo (sub empty-global-position 0) 0
      write empty-global-position (sub empty-global-position 0)
      printf "fibo(%d) = %d\n" (read-as-int64 n) (read-as-int64 result)
      TRUE

  [arg] > eo-application
    seq > @
      write empty-global-position (add empty-global-position 0)
      main (sub empty-global-position 0) 0
      write empty-global-position (sub empty-global-position 0)
      TRUE

  seq > @
    write p1 0
    write p2 1
    write empty-global-position 40
    eo-application args
    TRUE
