+package c2eo

+alias org.eolang.txt.sprintf
+alias org.eolang.io.stdout

+alias c2eo.examples.globalC
+alias c2eo.examples.operationsC
+alias c2eo.examples.overflowC
+alias c2eo.examples.factorialC
+alias c2eo.examples.fibonacciC
+alias c2eo.examples.piC
+alias c2eo.examples.switchC
+alias c2eo.examples.ifC
+alias c2eo.examples.whileC
+alias c2eo.examples.dowhileC
+alias c2eo.examples.forC
+alias c2eo.examples.simpleReturnC
+alias c2eo.examples.complexReturnC
+alias c2eo.examples.enumC1
+alias c2eo.examples.enumC2
+alias c2eo.examples.typeCastingC
+alias c2eo.examples.structC
+alias c2eo.examples.functionPointersC
+alias c2eo.examples.breakC
+alias c2eo.examples.continueC

# (typeCastingC args).main
# (functionPointersC args).main
[args...] > app

  seq > @
    stdout "\n"

    globalC
    stdout "\n"

    operationsC
    stdout "\n"

    overflowC
    stdout "\n"

    (factorialC args).main
    stdout "\n"

    (fibonacciC args).main
    stdout "\n"

    (piC args).main
    stdout "\n"

    (switchC args).main
    stdout "\n"

    (ifC args).main
    stdout "\n"

    (whileC args).main
    stdout "\n\n"

    (dowhileC args).main
    stdout "\n\n"

    (forC args).main
    stdout "\n\n"

    (simpleReturnC args).main
    stdout "\n"

    (complexReturnC args).main
    stdout "\n"

    (enumC1 args).main
    stdout "\n"

    (enumC2 args).main
    stdout "\n"

    (structC args).main
    stdout "\n"

    (breakC args).main
    stdout "\n"

    (continueC args).main
    stdout "\n"
